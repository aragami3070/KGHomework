#pragma once

namespace Smirnov251HW2 {
	float lines[] = {
		// голова
		0.5f,3.f,1.f,4.5f, // от левой щеки вверх до уха
		1.f,4.5f,0.5f,6.f, // левое ухо слева снизу вверх
		0.5f,6.f,0.5f, 7.5f, // левое ухо слева
		0.5f, 7.5f,1.f,8.f, // левое ухо верх слева
		1.f,8.f,1.5f,8.f, // левое ухо верх середина
		1.5f,8.f,2.f,7.5f, // левое ухо верх справа
		2.f,7.5f,1.5f, 6.f, // левое ухо справа сверху вниз
		1.5f, 6.f,1.5f,4.5f, // левое ухо справа до макушки
		1.5f,4.5f,3.f,4.5f, // макушка
		3.f,4.5f,3.f,6.f, // правое ухо слева снизу вверх
		3.f,6.f,2.5f,7.5f, // правое ухо слева
		2.5f,7.5f,3.f,8.f, // правое ухо верх слева
		3.f,8.f,3.5f,8.f, // правое ухо верх середина
		3.5f,8.f,4.f,7.5f, // правое ухо верх справа
		4.f,7.5f,4.f,6.f, // правое ухо сверху вниз
		4.f,6.f,3.5f,4.5f, // правое ухо справа
		3.5f,4.5f,4.f,3.f, // от правого уха вниз до щеки
		4.f,3.f,3.5f,1.5f, // правая скула
		3.5f,1.5f,2.5f,1.f, // подбородок справа
		2.5f,1.f,2.f,1.f, // подбородок снизу
		2.f,1.f,1.f,1.5f, // подбородок слева
		1.f,1.5f,0.5f,3.f, // левая скула
		// туловище
		4.f,3.f,5.5f,3.5f, // спина от головы вправо
		5.5f,3.5f,7.f,3.5f, // спина верх
		7.f,3.5f,7.5f,2.5f, // спина сверху до хвоста
		7.5f,2.5f,8.f,2.5f, // хвост сверху
		8.f,2.5f,8.f,2.f, // хвост справа
		8.f,2.f,7.5f,2.f, // хвост низ справа налево
		7.5f,2.f,7.5f,0.5f, // задняя нога справа сверху вниз
		7.5f,0.5f,6.5f,0.5f, // задняя нога низ
		6.5f,0.5f,6.5f,1.f, // задняя нога слева
		6.5f,1.f,6.f,1.f, // между задних ног
		6.f,1.f,6.f,0.5f, // левая задняя нога справа
		6.f,0.5f,5.f,0.5f, // левая задняя нога низ
		5.f,0.5f,5.f,1.f, // левая задняя нога слева
		5.f,1.f,4.f,1.f, // между задними и передними ногами
		4.f,1.f,4.f,0.5f, // правая передняя нога справа
		4.f,0.5f,3.f,0.5f, // правая передняя нога низ
		3.f,0.5f,3.f,1.f, // правая передняя нога слева
		3.f,1.f,2.5f,1.f, // между передних ног
		2.5f,1.f,2.5f,0.5f, // передняя нога справа
		2.5f,0.5f,1.5f,0.5f, // передняя нога низ
		1.5f,0.5f,1.5f,1.25f, // передняя нога слева
		// левый глаз
		1.5f,3.5f,1.5f,3.f, // левый глаз слева сверху вниз
		1.5f,3.f,2.f,3.f, // левый глаз низ
		2.f, 3.f,2.f,3.5f, // левый глаз справа
		2.f,3.5f,1.5f,3.5f, // левый глаз верх
		// правый глаз
		2.5f,3.5f,2.5f,3.f, // правый глаз слева
		2.5f,3.f,3.f, 3.f, // правый глаз снизу
		3.f,3.f,3.f,3.5f, // правый глаз справа
		3.f,3.5f,2.5f,3.5f, // правый глаз сверху
		// ушные раковины
		1.f,5.5f,1.f,7.f, // левая ушная раковина
		3.5f,5.5f,3.5f,7.f, // правая ушная раковина
		// нос
		2.f,2.5f,2.5f,2.5f, // нос сверху
		2.5f,2.5f,2.25f,2.f, // нос справа
		2.25f,2.f,2.f,2.5f // нос слева
	};
	// Number of lines
	unsigned int arrayLength = sizeof(lines) / sizeof(float);
	float Vx = 8.5f; // размер рисунка по горизонтали
	float Vy = 8.5f; // размер рисунка по вертикали
	float aspectFig = Vx / Vy; // соотношение сторон рисунка

	float ejik[] = {
		// нос
		0.5f, 3.5f, 0.5f, 3.3f, // нос вниз
		0.5f, 3.3f, 0.3f, 3.1f, // нос влево вниз
		0.3f, 3.1f, 0.1f, 3.5f, // нос влево вниз
		0.1f, 3.5f, 0.5f, 3.5f, // нос вниз

		// голова
		0.5f, 3.5f, 1.1f, 3.7f, // голова от носа вправо вверх 
		// голова: глаз: зрачок
		1.1f, 3.7f, 1.3f, 3.7f, // зрачок вправо
		1.3f, 3.7f, 1.5f, 4.1f, // зрачок вправо вверх
		// голова: глаз
		1.1f, 3.7f, 1.5f, 3.5f, // глаз вправо вниз
		1.5f, 3.5f, 1.7f, 4.1f, // глаз вправо вверх
		1.7f, 4.1f, 1.3f, 4.1f, // глаз влево
		// голова
		1.1f, 3.7f, 1.3f, 4.1f, // голова от начала глаза вправо вверх 
		1.3f, 4.1f, 1.7f, 4.5f, // голова от конца глаза вправо вверх 
		// голова:колючки нижняя часть
		1.7f, 4.5f, 2.1f, 4.7f, //  н. колючки вправо вверх
		2.1f, 4.7f, 1.9f, 4.1f, //  н. колючки влево вниз
		1.9f, 4.1f, 2.3f, 4.5f, //  н. колючки вправо вверх
		2.3f, 4.5f, 2.1f, 3.7f, //  н. колючки влево вниз
		2.1f, 3.7f, 2.5f, 3.9f, //  н. колючки вправо вверх
		2.5f, 3.9f, 2.3f, 3.3f, //  н. колючки влево вниз
		2.3f, 3.3f, 2.7f, 3.5f, //  н. колючки вправо вверх
		2.7f, 3.5f, 2.5f, 3.1f, //  н. колючки влево вниз
		// голова
		2.5f, 3.1f, 2.3f, 2.9f, //  голова от колючек/туловища влево вниз
		2.3f, 2.9f, 1.9f, 2.7f, //  голова рядом с телом влево вниз
		1.9f, 2.7f, 1.3f, 2.9f, //  голова от тела влево вверх
		// голова: рот
		1.3f, 2.9f, 1.9f, 3.3f, //  рот вправо вверх
		1.9f, 3.3f, 1.9f, 3.5f, //  рот вверх
		// голова
		1.3f, 2.9f, 0.5f, 3.3f, //  голова от рта к носу влево вверх


		// колючки верхняя часть
		1.7f, 4.5f, 1.3f, 4.3f, //  в. колючки влево вниз
		1.3f, 4.3f, 1.5f, 4.7f, //  в. колючки вправо вверх
		1.5f, 4.7f, 0.9f, 4.5f, //  в. колючки влево вниз
		0.9f, 4.5f, 1.5f, 5.1f, //  в. колючки вправо вверх
		1.5f, 5.1f, 1.1f, 5.5f, //  в. колючки влево вверх
		1.1f, 5.5f, 1.7f, 5.3f, //  в. колючки вправо вниз
		1.7f, 5.3f, 1.9f, 5.7f, //  в. колючки вправо вверх
		1.9f, 5.7f, 2.1f, 5.3f, //  в. колючки вправо вниз
		2.1f, 5.3f, 2.7f, 5.7f, //  в. колючки вправо вверх
		2.7f, 5.7f, 2.7f, 5.3f, //  в. колючки вправо вниз
		2.7f, 5.3f, 3.3f, 5.5f, //  в. колючки вправо вверх
		3.3f, 5.5f, 3.1f, 5.1f, //  в. колючки влево вниз
		3.1f, 5.1f, 3.7f, 4.9f, //  в. колючки вправо вниз
		3.7f, 4.9f, 3.3f, 4.7f, //  в. колючки влево вниз
		3.3f, 4.7f, 3.9f, 4.3f, //  в. колючки вправо вниз
		3.9f, 4.3f, 4.f, 4.1f, //  в. колючки вправо вниз
		4.f, 4.1f, 3.7f, 4.1f, //  в. колючки влево
		3.7f, 4.1f, 3.9f, 3.5f, //  в. колючки вправо вниз
		3.9f, 3.5f, 3.5f, 3.5f, //  в. колючки влево
		3.5f, 3.5f, 3.9f, 3.3f, //  в. колючки вправо вниз
		3.9f, 3.3f, 3.5f, 3.1f, //  в. колючки влево вниз
		3.5f, 3.1f, 3.9f, 2.9f, //  в. колючки вправо вниз
		3.9f, 2.9f, 3.5f, 2.7f, //  в. колючки влево вниз
		3.5f, 2.7f, 3.9f, 2.3f, //  в. колючки вправо вниз
		3.9f, 2.3f, 3.3f, 2.1f, //  в. колючки влево вниз
		3.3f, 2.1f, 3.9f, 1.9f, //  в. колючки вправо вниз
		3.9f, 1.9f, 3.5f, 1.7f, //  в. колючки влево вниз
		3.5f, 1.7f, 3.9f, 1.3f, //  в. колючки вправо вниз
		3.9f, 1.3f, 3.5f, 1.1f, //  в. колючки влево вниз
		3.5f, 1.1f, 3.9f, 0.9f, //  в. колючки вправо вниз
		3.9f, 0.9f, 3.5f, 0.662f, //  в. колючки влево вниз

		// хвост
		2.9f, 1.1f, 3.7f, 0.5f, //  хвост к в. колючкам вправо вниз
		2.9f, 1.1f, 2.7f, 0.9f, //  хвост рядом с телом влево вниз
		2.7f, 0.9f, 2.7f, 0.7f, //  хвост рядом с телом вниз
		2.7f, 0.7f, 3.7f, 0.5f, //  хвост к в. колючкам вправо вниз



		// тело
		2.5f, 3.1f, 2.9f, 2.7f, // тело от колючек/головы вправо вниз
		2.9f, 2.7f, 3.1f, 1.9f, // тело вправо вниз
		3.1f, 1.9f, 2.9f, 1.1f, // тело влево вниз
		2.7f, 0.7f, 1.9f, 0.5f,  // тело влево вниз
		// тело: нога
		1.9f, 0.5f, 1.1f, 0.3f,  // нога влево вниз
		1.1f, 0.3f, 0.7f, 0.9f,  // нога влево вверх
		0.7f, 0.9f, 0.9f, 1.5f,  // нога вправо вверх
		0.9f, 1.5f, 1.3f, 1.7f,  // нога вправо вверх
		1.3f, 1.7f, 1.9f, 0.5f,  // нога вправо вниз
		// тело
		1.5f, 1.3f, 1.9f, 1.5f,  // тело вправо вверх
		// тело: пояс
		1.8f, 1.7f, 3.05f, 1.7f,  // тело влево вверх
		// тело
		1.9f, 1.5f, 1.7f, 1.9f,  // тело влево вверх
		// тело: рука
		1.7f, 1.9f, 2.5f, 1.9f,  // рука вправо
		2.1f, 1.9f, 2.1f, 2.4f,  // рука вверх
		1.7f, 2.3f, 2.5f, 2.5f,  // рука вправо
		1.7f, 2.3f, 1.5f, 2.5f,  // рука влево вверх
		1.5f, 2.5f, 1.1f, 2.1f,  // рука влево вниз
		1.1f, 2.1f, 1.5f, 1.7f,  // рука вправо вниз
		1.5f, 1.7f, 1.7f, 1.9f,  // рука вправо вверх
		1.9f, 2.7f, 1.1f, 2.3f,  // рука влево вниз
		// тело
		1.7f, 2.3f, 1.9f, 2.7f,  // тело влево вверх

		// яблоко
		1.3f, 2.3f, 1.04f, 2.3f,  // яблоко влево
		1.1f, 2.1f, 0.9f, 2.7f,  // яблоко влево вверх
		0.9f, 2.7f, 0.7f, 2.5f,  // яблоко влево вниз
		0.7f, 2.5f, 1.1f, 2.1f,  // яблоко вправо вниз
		0.9f, 2.3f, 0.5f, 2.3f,  // яблоко влево
		0.5f, 2.3f, 0.5f, 2.1f,  // яблоко вниз
		0.5f, 2.1f, 0.1f, 1.5f,  // яблоко влево вниз
		0.1f, 1.5f, 0.1f, 1.1f,  // яблоко вниз
		0.1f, 1.1f, 0.5f, 0.5f,  // яблоко вправо вниз
		0.5f, 0.5f, 0.95f, 0.5f,  // яблоко вправо
		0.5f, 2.1f, 0.7f, 1.9f,  // яблоко вправо вниз
		0.7f, 1.9f, 0.7f, 2.2f,  // яблоко вверх
		0.7f, 2.2f, 0.9f, 2.3f,  // яблоко вправо вверх
		0.7f, 2.1f, 0.9f, 1.9f,  // яблоко вправо вниз
		0.9f, 1.9f, 1.3f, 1.9f,  // яблоко вправо вниз

	};
	unsigned int ejikLinesLength = sizeof(ejik) / sizeof(float);
	float ejikVx = 4.f; // размер рисунка по горизонтали
	float ejikVy = 5.9f; // размер рисунка по вертикали
	float ejikaspectFig = ejikVx / ejikVy; // соотношение сторон рисунка

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// Сводка для MyForm
	/// </summary>
	public ref class MyForm : public System::Windows::Forms::Form
	{
	public:
		MyForm(void)
		{
			InitializeComponent();
			//
			//TODO: добавьте код конструктора
			//
		}

	protected:
		/// <summary>
		/// Освободить все используемые ресурсы.
		/// </summary>
		~MyForm()
		{
			if (components)
			{
				delete components;
			}
		}

	private:
		/// <summary>
		/// Обязательная переменная конструктора.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Требуемый метод для поддержки конструктора — не изменяйте 
		/// содержимое этого метода с помощью редактора кода.
		/// </summary>
		void InitializeComponent(void)
		{
			this->SuspendLayout();
			// 
			// MyForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(6, 13);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(402, 578);
			this->DoubleBuffered = true;
			this->Name = L"MyForm";
			this->Text = L"MyForm";
			this->Load += gcnew System::EventHandler(this, &MyForm::MyForm_Load);
			this->Paint += gcnew System::Windows::Forms::PaintEventHandler(this, &MyForm::MyForm_Paint);
			this->KeyDown += gcnew System::Windows::Forms::KeyEventHandler(this, &MyForm::MyForm_KeyDown);
			this->Resize += gcnew System::EventHandler(this, &MyForm::MyForm_Resize);
			this->ResumeLayout(false);

		}
#pragma endregion
	private: bool keepAspectRatio; // значение - сохранять ли соотношение сторон рисунка? 
	private: bool choosePicture; // true - Задание, false - пример

	private: System::Void MyForm_Paint(System::Object^ sender, System::Windows::Forms::PaintEventArgs^ e) {
		Graphics^ g = e->Graphics;
		// Заполнить форму аквамарином
		g->Clear(Color::Aquamarine);

		// Создать black Pen с толщиной = 2
		Pen^ blackPen = gcnew Pen(Color::Black, 2);

		float Wx = ClientRectangle.Width; // размер окна по горизонтали
		float Wy = ClientRectangle.Height; // размер окна по вертикали
		float aspectForm = Wx / Wy; // соотношение сторон окна рисования

		float Sx, Sy;

		if (choosePicture) {
			// Ежик
			if (keepAspectRatio) {
				// коэффициенты увеличения при сохранении исходного соотношения сторон
				Sx = Sy = ejikaspectFig < aspectForm ? Wy / ejikVy : Wx / ejikVx;
			}
			else {
				Sx = Wx / ejikVx; // коэффициент увеличения по оси Ox
				Sy = Wy / ejikVy; // коэффициент увеличения по оси Oy
			}
			// смещение в положительную сторону по оси Oy после смены знака
			float Ty = Sy * ejikVy;
			for (int i = 0; i < ejikLinesLength; i += 4) {
				g->DrawLine(blackPen,
					Sx * ejik[i], Ty - Sy * ejik[i + 1],
					Sx * ejik[i + 2], Ty - Sy * ejik[i + 3]
				);
			}

		}
		else {
			// Заяц
			if (keepAspectRatio) {
				// коэффициенты увеличения при сохранении исходного соотношения сторон
				Sx = Sy = aspectFig < aspectForm ? Wy / Vy : Wx / Vx;
			}
			else {
				Sx = Wx / Vx; // коэффициент увеличения по оси Ox
				Sy = Wy / Vy; // коэффициент увеличения по оси Oy
			}
			// смещение в положительную сторону по оси Oy после смены знака
			float Ty = Sy * Vy;
			for (int i = 0; i < arrayLength; i += 4) {
				g->DrawLine(blackPen,
					Sx * lines[i], Ty - Sy * lines[i + 1],
					Sx * lines[i + 2], Ty - Sy * lines[i + 3]
				);
			}
		}
	}
	private: System::Void MyForm_Resize(System::Object^ sender, System::EventArgs^ e) {
		Refresh();
	}

	private: System::Void MyForm_Load(System::Object^ sender, System::EventArgs^ e) {
		// начальное значение: сохранять соотношение сторон рисунка
		keepAspectRatio = true;
		
		choosePicture = true;
	}
	private: System::Void MyForm_KeyDown(System::Object^ sender, System::Windows::Forms::KeyEventArgs^ e) {
		// Если нажата M, то меняем keepAspectRatio на противоположное значение
		switch (e->KeyCode) {
		case Keys::M:
			keepAspectRatio = !keepAspectRatio;
			break;

		case Keys::N:
			choosePicture = !choosePicture;
			break;
		default:
			break;
		}
		Refresh();
	}
	};
}
